# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

platform :android do

  desc 'Increase version name'
  lane :increaseVersion do |options|
    currentVersion = android_get_version_name(
      gradle_file: "./android/app/build.gradle" # optional
    )
    android_set_version_name(
      version_name: options[:version] ? options[:version] : currentVersion,
      gradle_file: "./android/app/build.gradle" # optional
    )
    gradle(
      task: 'incrementVersionCode',
      project_dir: 'android/'
    )
    git_commit(
      path: ['./android/gradle.properties'], 
      message: 'Bump Version Android'
    )
    push_to_git_remote(
      remote: "origin", 
      remote_branch: ENV["GIT_PUSH_BRANCH"],
    )
  end

  desc 'Build the Android application.'
  lane :build do |options|
    # increaseVersion(version: options[:version])
    gradle(task: 'clean', project_dir: 'android/')
    gradle(
      task: 'assemble', 
      build_type: 'Release', 
      project_dir: 'android/',
    )
    # gradle(
    #   task: 'incrementVersionCode',
    #   project_dir: 'android/'
    # )
  end


  desc 'Ship to Playstore Beta.'
  lane :beta do |options|
    # build(version: options[:version])
    build
    upload_to_play_store(
      track: 'beta',
      json_key: 'fastlane/googlePlaySecrectKey.json',
      package_name: ENV['ANDROID_PACKAGE_NAME']
    )
    # changelog = prompt(
    #   text: options[:changelog],
    #   multi_line_end_keyword: "END"
    # )
    # slack(
    #   message: 'App successfully uploaded to Playstore Beta.',
    #   success: true,
    #   slack_url: ENV["SLACK_URL"]
    # )
  end

  desc 'Ship to Playstore Production.'
  lane :production do |options|
    upload_to_play_store(
      track: 'beta',
      track_promote_to: "production",
      json_key: 'fastlane/googlePlaySecrectKey.json',
      package_name: ENV['ANDROID_PACKAGE_NAME'] # ,
      # metadata_path: 'fastlane/metadata/android'
    )
    # slack(
    #   message: 'App successfully uploaded to Playstore Production.',
    #   success: true,
    #   slack_url: ENV["SLACK_URL"]
    # )
  end
end

platform :ios do
  # iOS Lanes
  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(
      readonly: true, 
      type: 'appstore',
      storage_mode: 'git',
      git_url: ENV["MATCH_GIT_URL"],
      app_identifier: ENV['IOS_APP_IDENTIFIER']
    )
  end

  desc 'Auto snapshots'
  lane :increaseVersion do |options|
    increment_version_number(
      version_number: options[:version],
      xcodeproj: './ios/mobile.xcodeproj'
    )
  end

  desc 'Auto snapshots'
  lane :screenshots do
    capture_screenshots
  end

  desc 'Build the iOS application.'
  lane :build do
    certificates
    gym(
      scheme: 'mobile', 
      workspace: './ios/mobile.xcworkspace', 
      include_bitcode: true
    )
    sh("rm -r ../mobile-template-config")
    reset_git_repo(
      force: true,
      skip_clean: true
    ) # reset changes for configuratioin before bump build
    increment_build_number(xcodeproj: './ios/mobile.xcodeproj')
    commit_version_bump(message: 'Bump Build iOS', xcodeproj: './ios/mobile.xcodeproj')
    push_to_git_remote(
      remote: "origin", 
      remote_branch: ENV["GIT_PUSH_BRANCH"],
    )
  end

  desc 'Ship to Appstore Testflight.'
  lane :beta do
    build
    pilot(
      skip_waiting_for_build_processing: true,
      username: ENV['APPSTORE_USERNAME']
    )
    slack(
      message: 'App successfully uploaded to AppStore Testflight.',
      success: true,
      slack_url: ENV["SLACK_URL"]
    )
  end

  desc 'Ship to Appstore Production.' 
  lane :production do
    deliver(
      submit_for_review: true,
      automatic_release: true,
      force: true, # Skip HTMl report verification,
      screenshots_path: './fastlane/ios/screenshots',
      metadata_path: './fastlane/metadata/ios',
      skip_binary_upload: true,
      username: ENV['APPSTORE_USERNAME'],
      app_identifier: ENV['IOS_APP_IDENTIFIER']
    )
    slack(
      message: 'App successfully uploaded to AppStore Production.',
      success: true,
      slack_url: ENV["SLACK_URL"]
    )
  end
end
